Subject: [PATCH 1/2 v2] accounting L7 networking traffic for TCP/UDP/Raw-IP
Patch-mainline: in-house
From: Li Yu <bingtian.ly@taobao.com>
References: 

Add per-process networking accouting.  'klog_net_accounting_enabled' is defined
in sysctl to switch on/off this feature.

Signed-off-by: Li Yu <bingtian.ly@taobao.com>
---
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 5566f02..c6eda02 100644

--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1640,6 +1640,9 @@ struct task_struct {
 	struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 #endif
 	struct ba_iocb *current_baiocb;
+
+	u64 rx_bytes;
+	u64 tx_bytes;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/include/net/sock.h b/include/net/sock.h
index b1f5270..d45f518 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1634,6 +1634,15 @@ extern int sock_tx_timestamp(struct msghdr *msg,
 			     struct sock *sk,
 			     union skb_shared_tx *shtx);
 
+static inline void task_net_accounting_rx(unsigned int len)
+{
+	current->rx_bytes += len; /* Ignore PDU header */
+}
+
+static inline void task_net_accounting_tx(unsigned int len)
+{
+	current->tx_bytes += len; /* Ignore PDU header */
+}
 
 /**
  * sk_eat_skb - Release a skb if it is no longer needed
diff --git a/kernel/exit.c b/kernel/exit.c
index 1c77314..d26d06e 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -57,6 +57,8 @@
 #include <asm/mmu_context.h>
 #include "cred-internals.h"
 
+int klog_net_accounting_enabled = 0;
+
 static void exit_mm(struct task_struct * tsk);
 
 static void __unhash_process(struct task_struct *p)
@@ -975,6 +977,11 @@ NORET_TYPE void do_exit(long code)
 	tsk->exit_code = code;
 	taskstats_exit(tsk, group_dead);
 
+	if (klog_net_accounting_enabled && (tsk->rx_bytes || tsk->tx_bytes))
+		printk(KERN_INFO "pid=%d tgid=%d comm=%s rx_bytes=%llu "
+				 "tx_bytes=%llu\n", tsk->pid, tsk->tgid,
+				 tsk->comm, tsk->rx_bytes, tsk->tx_bytes);
+
 	exit_mm(tsk);
 
 	if (group_dead)
diff --git a/kernel/fork.c b/kernel/fork.c
index 71bb6e2..21f0f14 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1108,6 +1108,7 @@ static struct task_struct *copy_process(unsigned long clone_flags,
 	p->default_timer_slack_ns = current->timer_slack_ns;
 
 	task_io_accounting_init(&p->ioac);
+	p->rx_bytes = p->tx_bytes = 0;
 	acct_clear_integrals(p);
 
 	posix_cpu_timers_init(p);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 0183fd3..2afbbbd 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -127,6 +127,8 @@ extern int rcutorture_runnable;
 extern int blk_iopoll_enabled;
 #endif
 
+extern int klog_net_accounting_enabled;
+
 /* Constants used for minimum and  maximum */
 #ifdef CONFIG_LOCKUP_DETECTOR
 static int sixty = 60;
@@ -1159,6 +1161,14 @@ static struct ctl_table kern_table[] = {
 		.proc_handler	= &proc_dointvec,
 	},
 #endif
+	{
+		.ctl_name	= CTL_UNNUMBERED,
+		.procname	= "klog_net_accounting",
+		.data		= &klog_net_accounting_enabled,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
 /*
  * NOTE: do not add new entries to this table unless you have read
  * Documentation/sysctl/ctl_unnumbered.txt
diff --git a/net/ipv4/raw.c b/net/ipv4/raw.c
index f2502bf..6b5b377 100644
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@ -603,6 +603,7 @@ done:
 out:
 	if (err < 0)
 		return err;
+	task_net_accounting_tx(len);
 	return len;
 
 do_confirm:
@@ -710,6 +711,8 @@ done:
 out:
 	if (err)
 		return err;
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	return copied;
 }
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 414f590..f311b5d 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -672,8 +672,10 @@ ssize_t tcp_splice_read(struct socket *sock, loff_t *ppos,
 
 	release_sock(sk);
 
-	if (spliced)
+	if (spliced) {
+		task_net_accounting_rx(spliced);
 		return spliced;
+	}
 
 	return ret;
 }
@@ -849,6 +851,7 @@ wait_for_memory:
 out:
 	if (copied)
 		tcp_push(sk, flags, mss_now, tp->nonagle);
+	task_net_accounting_tx(copied);
 	return copied;
 
 do_error:
@@ -1101,6 +1104,7 @@ out:
 		tcp_push(sk, flags, mss_now, tp->nonagle);
 	TCP_CHECK_TIMER(sk);
 	release_sock(sk);
+	task_net_accounting_tx(copied);
 	return copied;
 
 do_fault:
@@ -1740,6 +1744,8 @@ skip_copy:
 
 	TCP_CHECK_TIMER(sk);
 	release_sock(sk);
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	return copied;
 
 out:
diff --git a/net/ipv4/udp.c b/net/ipv4/udp.c
index 8390ce9..cd813f9 100644
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -801,8 +801,10 @@ out:
 	ip_rt_put(rt);
 	if (free)
 		kfree(ipc.opt);
-	if (!err)
+	if (!err) {
+		task_net_accounting_tx(len);
 		return len;
+	}
 	/*
 	 * ENOBUFS = no kernel mem, SOCK_NOSPACE = no sndbuf space.  Reporting
 	 * ENOBUFS might not be good (it's not tunable per se), but otherwise
@@ -866,8 +868,10 @@ int udp_sendpage(struct sock *sk, struct page *page, int offset,
 	up->len += size;
 	if (!(up->corkflag || (flags&MSG_MORE)))
 		ret = udp_push_pending_frames(sk);
-	if (!ret)
+	if (!ret) {
 		ret = size;
+		task_net_accounting_tx(size);
+	}
 out:
 	release_sock(sk);
 	return ret;
@@ -1027,6 +1031,8 @@ try_again:
 		ip_cmsg_recv(msg, skb);
 
 	err = copied;
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	if (flags & MSG_TRUNC)
 		err = ulen;
 
