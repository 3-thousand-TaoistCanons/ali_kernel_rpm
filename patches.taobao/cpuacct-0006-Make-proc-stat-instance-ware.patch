From c420a51322b737eb17a5272457d6b9cc2711eb30 Mon Sep 17 00:00:00 2001
From: Sha Zhengju (handai) <handai.szj@taobao.com>
Date: Fri, 1 Jun 2012 18:11:08 +0800
Subject: [PATCH 6/9] Make /proc/stat instance-ware
Patch-mainline: never
References: 

While reading /proc/stat, we check the reader whether in instance or not.
If it is in instance, we show instance-ware cpu related stats(including
usr/sys/...) to the reader, otherwise we still show the global data.

Signed-off-by: Zhu Yanhai <gaoyang.zyh@taobao.com>
Signed-off-by: Sha Zhengju <handai.szj@taobao.com>
Acked-by: 

---
 fs/proc/stat.c                |  165 +++++++++++++++++++++++++++++++++++------
 include/linux/cpuset.h        |    1 +
 include/linux/pid_namespace.h |    9 ++
 kernel/cpuset.c               |   17 ++++
 kernel/sched.c                |   23 ++++++
 5 files changed, 192 insertions(+), 23 deletions(-)

diff --git a/fs/proc/stat.c b/fs/proc/stat.c
index 8de5ffc..4830fa7 100644
--- a/fs/proc/stat.c
+++ b/fs/proc/stat.c
@@ -12,6 +12,10 @@
 #include <linux/irqnr.h>
 #include <asm/cputime.h>
 #include <linux/tick.h>
+#include <linux/cgroup.h>
+#include <linux/cpuset.h>
+#include <linux/cpumask.h>
+#include <linux/pid_namespace.h>
 
 #ifndef arch_irq_stat_cpu
 #define arch_irq_stat_cpu(cpu) 0
@@ -23,6 +27,14 @@
 #define arch_idle_time(cpu) 0
 #endif
 
+#ifdef CONFIG_CGROUP_CPUACCT
+extern struct kernel_cpustat *task_ca_kcpustat_ptr(struct task_struct*, int);
+extern bool task_in_nonroot_cpuacct(struct task_struct *);
+#else
+bool task_in_nonroot_cpuacct(struct task_struct *tsk) { return false; }
+struct kernel_cpustat *task_ca_kcpustat_ptr(struct task_struct*, int) { return NULL; }
+#endif
+
 static u64 get_idle_time(int cpu)
 {
 	u64 idle, idle_time = get_cpu_idle_time_us(cpu, NULL);
@@ -60,6 +72,8 @@ static int show_stat(struct seq_file *p, void *v)
 	u64 sum_softirq = 0;
 	unsigned int per_softirq_sums[NR_SOFTIRQS] = {0};
 	struct timespec boottime;
+	struct kernel_cpustat *kcpustat;
+	struct cpumask cpus_allowed;
 
 	user = nice = system = idle = iowait =
 		irq = softirq = steal = 0;
@@ -67,16 +81,63 @@ static int show_stat(struct seq_file *p, void *v)
 	getboottime(&boottime);
 	jif = boottime.tv_sec;
 
+	rcu_read_lock();
+	if (in_noninit_pid_ns(current->nsproxy->pid_ns) &&
+		task_in_nonroot_cpuacct(current)) {
+		cpumask_copy(&cpus_allowed, cpu_possible_mask);
+		if (task_subsys_state(current, cpuset_subsys_id)) {
+			memset(&cpus_allowed, 0, sizeof(cpus_allowed));
+			get_tsk_cpu_allowed(current, &cpus_allowed);
+		}
+
+		for_each_cpu_and(i, cpu_possible_mask, &cpus_allowed) {
+			kcpustat = task_ca_kcpustat_ptr(current, i);
+			user += kcpustat->cpustat[CPUTIME_USER];
+			nice += kcpustat->cpustat[CPUTIME_NICE];
+			system += kcpustat->cpustat[CPUTIME_SYSTEM];
+			guest += kcpustat->cpustat[CPUTIME_GUEST];
+
+			idle += kcpustat_cpu(i).cpustat[CPUTIME_IDLE];
+			idle += arch_idle_time(i);
+			idle -= kcpustat->cpustat[CPUTIME_IDLE_BASE];
+
+			iowait += kcpustat_cpu(i).cpustat[CPUTIME_IOWAIT];
+			iowait -= kcpustat->cpustat[CPUTIME_IOWAIT_BASE];
+
+			irq += kcpustat->cpustat[CPUTIME_IRQ];
+			softirq += kcpustat->cpustat[CPUTIME_SOFTIRQ];
+
+			steal += kcpustat_cpu(i).cpustat[CPUTIME_USER]
+				- kcpustat->cpustat[CPUTIME_USER]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_NICE]
+				- kcpustat->cpustat[CPUTIME_NICE]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM]
+				- kcpustat->cpustat[CPUTIME_SYSTEM]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_IRQ]
+				- kcpustat->cpustat[CPUTIME_IRQ]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ]
+				- kcpustat->cpustat[CPUTIME_SOFTIRQ]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_GUEST]
+				- kcpustat->cpustat[CPUTIME_GUEST]
+				- kcpustat->cpustat[CPUTIME_STEAL_BASE];
+		}
+	} else {
+		for_each_possible_cpu(i) {
+			user += kcpustat_cpu(i).cpustat[CPUTIME_USER];
+			nice += kcpustat_cpu(i).cpustat[CPUTIME_NICE];
+			system += kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
+			idle += get_idle_time(i);
+			iowait += get_iowait_time(i);
+			irq += kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
+			softirq += kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
+			steal += kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
+			guest += kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
+		}
+
+	}
+	rcu_read_unlock();
+
 	for_each_possible_cpu(i) {
-		user += kcpustat_cpu(i).cpustat[CPUTIME_USER] ;
-		nice += kcpustat_cpu(i).cpustat[CPUTIME_NICE] ;
-		system += kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
-		idle += get_idle_time(i);
-		iowait += get_iowait_time(i);
-		irq += kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
-		softirq += kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
-		steal += kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
-		guest += kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
 		sum += kstat_cpu_irqs_sum(i);
 		sum += arch_irq_stat_cpu(i);
 
@@ -89,7 +150,8 @@ static int show_stat(struct seq_file *p, void *v)
 	}
 	sum += arch_irq_stat();
 
-	seq_printf(p, "cpu  %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",
+	seq_printf(p,
+		"cpu  %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",
 		(unsigned long long)cputime64_to_clock_t(user),
 		(unsigned long long)cputime64_to_clock_t(nice),
 		(unsigned long long)cputime64_to_clock_t(system),
@@ -99,19 +161,74 @@ static int show_stat(struct seq_file *p, void *v)
 		(unsigned long long)cputime64_to_clock_t(softirq),
 		(unsigned long long)cputime64_to_clock_t(steal),
 		(unsigned long long)cputime64_to_clock_t(guest));
-	for_each_online_cpu(i) {
-
-		/* Copy values here to work around gcc-2.95.3, gcc-2.96 */
-		user = kcpustat_cpu(i).cpustat[CPUTIME_USER] ;
-		nice = kcpustat_cpu(i).cpustat[CPUTIME_NICE] ;
-		system = kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
-		idle = get_idle_time(i);
-		iowait = get_iowait_time(i);
-		irq = kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
-		softirq = kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
-		steal = kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
-		guest = kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
-		seq_printf(p,
+
+	rcu_read_lock();
+	if (in_noninit_pid_ns(current->nsproxy->pid_ns) &&
+		task_in_nonroot_cpuacct(current)) {
+		cpumask_copy(&cpus_allowed, cpu_possible_mask);
+		if (task_subsys_state(current, cpuset_subsys_id)) {
+			memset(&cpus_allowed, 0, sizeof(cpus_allowed));
+			get_tsk_cpu_allowed(current, &cpus_allowed);
+		}
+
+		for_each_cpu_and(i, cpu_possible_mask, &cpus_allowed) {
+			kcpustat = task_ca_kcpustat_ptr(current, i);
+			user = kcpustat->cpustat[CPUTIME_USER];
+			nice = kcpustat->cpustat[CPUTIME_NICE];
+			system = kcpustat->cpustat[CPUTIME_SYSTEM];
+			guest = kcpustat->cpustat[CPUTIME_GUEST];
+
+			idle = kcpustat_cpu(i).cpustat[CPUTIME_IDLE];
+			idle += arch_idle_time(i);
+			idle -= kcpustat->cpustat[CPUTIME_IDLE_BASE];
+
+			iowait = kcpustat_cpu(i).cpustat[CPUTIME_IOWAIT];
+			iowait -= kcpustat->cpustat[CPUTIME_IOWAIT_BASE];
+
+			irq = kcpustat->cpustat[CPUTIME_IRQ];
+			softirq = kcpustat->cpustat[CPUTIME_SOFTIRQ];
+
+			steal = kcpustat_cpu(i).cpustat[CPUTIME_USER]
+				- kcpustat->cpustat[CPUTIME_USER]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_NICE]
+				- kcpustat->cpustat[CPUTIME_NICE]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM]
+				- kcpustat->cpustat[CPUTIME_SYSTEM]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_IRQ]
+				- kcpustat->cpustat[CPUTIME_IRQ]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ]
+				- kcpustat->cpustat[CPUTIME_SOFTIRQ]
+				+ kcpustat_cpu(i).cpustat[CPUTIME_GUEST]
+				- kcpustat->cpustat[CPUTIME_GUEST]
+				- kcpustat->cpustat[CPUTIME_STEAL_BASE];
+
+			seq_printf(p,
+			"cpu%d %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",
+			i,
+			(unsigned long long)cputime64_to_clock_t(user),
+			(unsigned long long)cputime64_to_clock_t(nice),
+			(unsigned long long)cputime64_to_clock_t(system),
+			(unsigned long long)cputime64_to_clock_t(idle),
+			(unsigned long long)cputime64_to_clock_t(iowait),
+			(unsigned long long)cputime64_to_clock_t(irq),
+			(unsigned long long)cputime64_to_clock_t(softirq),
+			(unsigned long long)cputime64_to_clock_t(steal),
+			(unsigned long long)cputime64_to_clock_t(guest));
+		}
+	} else {
+		for_each_online_cpu(i) {
+			/* Copy values here to work around gcc-2.95.3, gcc-2.96 */
+			user = kcpustat_cpu(i).cpustat[CPUTIME_USER];
+			nice = kcpustat_cpu(i).cpustat[CPUTIME_NICE];
+			system = kcpustat_cpu(i).cpustat[CPUTIME_SYSTEM];
+			idle = get_idle_time(i);
+			iowait = get_iowait_time(i);
+			irq = kcpustat_cpu(i).cpustat[CPUTIME_IRQ];
+			softirq = kcpustat_cpu(i).cpustat[CPUTIME_SOFTIRQ];
+			steal = kcpustat_cpu(i).cpustat[CPUTIME_STEAL];
+			guest = kcpustat_cpu(i).cpustat[CPUTIME_GUEST];
+
+			seq_printf(p,
 			"cpu%d %llu %llu %llu %llu %llu %llu %llu %llu %llu\n",
 			i,
 			(unsigned long long)cputime64_to_clock_t(user),
@@ -123,7 +240,9 @@ static int show_stat(struct seq_file *p, void *v)
 			(unsigned long long)cputime64_to_clock_t(softirq),
 			(unsigned long long)cputime64_to_clock_t(steal),
 			(unsigned long long)cputime64_to_clock_t(guest));
+		}
 	}
+	rcu_read_unlock();
 	seq_printf(p, "intr %llu", (unsigned long long)sum);
 
 	/* sum again ? it could be updated? */
diff --git a/include/linux/cpuset.h b/include/linux/cpuset.h
index bea785f..f23f9dd 100644
--- a/include/linux/cpuset.h
+++ b/include/linux/cpuset.h
@@ -24,6 +24,7 @@ extern void cpuset_cpus_allowed(struct task_struct *p, struct cpumask *mask);
 extern int cpuset_cpus_allowed_fallback(struct task_struct *p);
 extern nodemask_t cpuset_mems_allowed(struct task_struct *p);
 extern cpumask_var_t get_cs_cpu_allowed(struct cgroup *cgrp);
+extern void get_tsk_cpu_allowed(struct task_struct *tsk, struct cpumask *pmask);
 #define cpuset_current_mems_allowed (current->mems_allowed)
 void cpuset_init_current_mems_allowed(void);
 int cpuset_nodemask_valid_mems_allowed(nodemask_t *nodemask);
diff --git a/include/linux/pid_namespace.h b/include/linux/pid_namespace.h
index 0e4e855..3e8314b 100644
--- a/include/linux/pid_namespace.h
+++ b/include/linux/pid_namespace.h
@@ -56,6 +56,11 @@ static inline void put_pid_ns(struct pid_namespace *ns)
 		kref_put(&ns->kref, free_pid_ns);
 }
 
+static inline bool in_noninit_pid_ns(struct pid_namespace *ns)
+{
+	return ns != &init_pid_ns;
+}
+
 #else /* !CONFIG_PID_NS */
 #include <linux/err.h>
 
@@ -76,6 +81,10 @@ static inline void put_pid_ns(struct pid_namespace *ns)
 {
 }
 
+static inline bool in_noninit_pid_ns(struct pid_namespace *ns)
+{
+	return false;
+}
 
 static inline void zap_pid_ns_processes(struct pid_namespace *ns)
 {
diff --git a/kernel/cpuset.c b/kernel/cpuset.c
index 8d9ebad..74057ee 100644
--- a/kernel/cpuset.c
+++ b/kernel/cpuset.c
@@ -2188,6 +2188,23 @@ void cpuset_cpus_allowed(struct task_struct *tsk, struct cpumask *pmask)
 	mutex_unlock(&callback_mutex);
 }
 
+void get_tsk_cpu_allowed(struct task_struct *tsk, struct cpumask *pmask)
+{
+	struct cpuset *cs = NULL;
+
+	mutex_lock(&callback_mutex);
+	task_lock(tsk);
+	cs = task_cs(tsk);
+	if (cs)
+		cpumask_and(pmask, cs->cpus_allowed, cpu_possible_mask);
+	else
+		cpumask_copy(pmask, cpu_possible_mask);
+	task_unlock(tsk);
+	mutex_unlock(&callback_mutex);
+
+	return;
+}
+
 int cpuset_cpus_allowed_fallback(struct task_struct *tsk)
 {
 	const struct cpuset *cs;
diff --git a/kernel/sched.c b/kernel/sched.c
index 1e612f4..a70680b 100644
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -5518,6 +5518,29 @@ static inline struct cpuacct *task_ca(struct task_struct *tsk)
 	return container_of(task_subsys_state(tsk, cpuacct_subsys_id),
 			    struct cpuacct, css);
 }
+
+struct kernel_cpustat *task_ca_kcpustat_ptr(struct task_struct *tsk, int cpu)
+{
+	struct cpuacct *ca;
+
+	ca = task_ca(tsk);
+	return per_cpu_ptr(ca->cpustat, cpu);
+}
+
+bool task_in_nonroot_cpuacct(struct task_struct *tsk)
+{
+	struct cpuacct *ca = NULL;
+
+	if (unlikely(!cpuacct_subsys.active))
+		return false;
+
+	ca = task_ca(tsk);
+	if (ca && (ca != &root_cpuacct))
+		return true;
+
+	return false;
+}
+
 #endif
 
 static inline void task_group_account_field(struct task_struct *p,
-- 
1.7.1

