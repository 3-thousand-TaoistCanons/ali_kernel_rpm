From: Sha Zhengju <handai.szj@taobao.com>
Subject: Make /proc/cpuinfo instance ware
Patch-mainline: never
References:

Like /proc/stat, we only show instance-inside cpuinfo. What's more:
1) 'Processer id' is printed sequentially(but the actual cpu info is just
the one belonging to the instance)
2)'siblings/cpu cores' is the number of instance's cpu cores
3)'core id' is the virtual cpu id
4)'physical id' is set to 0

Signed-off-by: Sha Zhengju <handai.szj@taobao.com>
Acked-by: 

Index: linux-2.6.32-220.17.1.el5/arch/x86/kernel/cpu/proc.c
===================================================================
--- linux-2.6.32-220.17.1.el5.orig/arch/x86/kernel/cpu/proc.c	2012-11-26 11:22:19.000000000 +0800
+++ linux-2.6.32-220.17.1.el5/arch/x86/kernel/cpu/proc.c	2012-11-30 16:25:03.000000000 +0800
@@ -8,15 +8,22 @@
  *	Get CPU information for use by the procfs.
  */
 static void show_cpuinfo_core(struct seq_file *m, struct cpuinfo_x86 *c,
-			      unsigned int cpu)
+			unsigned int cpu, unsigned int index, bool instance, unsigned int total)
 {
 #ifdef CONFIG_SMP
 	if (c->x86_max_cores * smp_num_siblings > 1) {
-		seq_printf(m, "physical id\t: %d\n", c->phys_proc_id);
-		seq_printf(m, "siblings\t: %d\n",
-			   cpumask_weight(cpu_core_mask(cpu)));
-		seq_printf(m, "core id\t\t: %d\n", c->cpu_core_id);
-		seq_printf(m, "cpu cores\t: %d\n", c->booted_cores);
+		if (instance) {
+			seq_printf(m, "physical id\t: 0\n");
+			seq_printf(m, "siblings\t: %d\n", total);
+			seq_printf(m, "core id\t\t: %d\n", index);
+			seq_printf(m, "cpu cores\t: %d\n", total);
+		} else {
+			seq_printf(m, "physical id\t: %d\n", c->phys_proc_id);
+			seq_printf(m, "siblings\t: %d\n",
+				cpumask_weight(cpu_core_mask(cpu)));
+			seq_printf(m, "core id\t\t: %d\n", c->cpu_core_id);
+			seq_printf(m, "cpu cores\t: %d\n", c->booted_cores);
+		}
 		seq_printf(m, "apicid\t\t: %d\n", c->apicid);
 		seq_printf(m, "initial apicid\t: %d\n", c->initial_apicid);
 	}
@@ -61,21 +68,37 @@
 }
 #endif
 
+#ifdef CONFIG_CGROUP_CPUACCT
+extern bool in_instance_and_hiding(unsigned int, struct task_struct *, unsigned int *,
+					bool *, unsigned int *);
+#else
+bool in_instance_and_hiding(unsigned int cpu, struct task_struct *task, unsigned int *index,
+					bool *instance, unsigned int *total)
+{
+	return false;
+}
+#endif
+
 static int show_cpuinfo(struct seq_file *m, void *v)
 {
 	struct cpuinfo_x86 *c = v;
-	unsigned int cpu = 0;
+	unsigned int cpu = 0, index, total;
 	int i;
+	bool instance = false;
 
 #ifdef CONFIG_SMP
 	cpu = c->cpu_index;
 #endif
+	index = cpu;
+	if (in_instance_and_hiding(cpu, current, &index, &instance, &total))
+		return 0;
+
 	seq_printf(m, "processor\t: %u\n"
 		   "vendor_id\t: %s\n"
 		   "cpu family\t: %d\n"
 		   "model\t\t: %u\n"
 		   "model name\t: %s\n",
-		   cpu,
+		   index,
 		   c->x86_vendor_id[0] ? c->x86_vendor_id : "unknown",
 		   c->x86,
 		   c->x86_model,
@@ -99,7 +122,7 @@
 	if (c->x86_cache_size >= 0)
 		seq_printf(m, "cache size\t: %d KB\n", c->x86_cache_size);
 
-	show_cpuinfo_core(m, c, cpu);
+	show_cpuinfo_core(m, c, cpu, index, instance, total);
 	show_cpuinfo_misc(m, c);
 
 	seq_printf(m, "flags\t\t:");
Index: linux-2.6.32-220.17.1.el5/kernel/sched.c
===================================================================
--- linux-2.6.32-220.17.1.el5.orig/kernel/sched.c	2012-11-26 11:22:59.000000000 +0800
+++ linux-2.6.32-220.17.1.el5/kernel/sched.c	2012-11-30 16:24:40.000000000 +0800
@@ -5736,6 +5736,40 @@
 	return false;
 }
 
+bool in_instance_and_hiding(unsigned int cpu, struct task_struct *task,
+		unsigned int *index, bool *in_instance, unsigned int *total)
+{
+	struct cpumask cpus_allowed;
+	int i, id = 0;
+
+	if (!in_noninit_pid_ns(task->nsproxy->pid_ns))
+		return false;
+
+	if (!task_in_nonroot_cpuacct(task))
+		return false;
+
+	*in_instance = true;
+	cpumask_copy(&cpus_allowed, cpu_possible_mask);
+	if (task_subsys_state(task, cpuset_subsys_id)) {
+		memset(&cpus_allowed, 0, sizeof(cpus_allowed));
+		get_tsk_cpu_allowed(task, &cpus_allowed);
+	}
+
+	*total = cpumask_weight(&cpus_allowed);
+	if (cpumask_test_cpu(cpu, &cpus_allowed)) {
+		for_each_possible_cpu(i) {
+			if (i == cpu)
+				break;
+			if (cpumask_test_cpu(i, &cpus_allowed))
+				id ++;
+		}
+		*index = id;
+		return false;
+	} else
+		return true;
+
+}
+
 static int cpuacct_cgroup_walk_tree(struct cpuacct *root, void *data,
 			  int (*func)(struct cpuacct *, void *))
 {
