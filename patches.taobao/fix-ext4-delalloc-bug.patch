From: "Theodore Ts'o" <tytso@mit.edu>
Subject: Ext4: remove calls to ext4_jbd2_file_inode() from delalloc write path
Reference: f3b59291a69d0b734be1fc8be489fef2dd846d3d
Patch-mainline:  v3.7-rc3-28-gf3b5929
References: 

The calls to ext4_jbd2_file_inode() are needed to guarantee that we do
not expose stale data in the data=ordered mode.  However, they are not
necessary because in all of the cases where we have newly allocated
blocks in the delayed allocation write path, we immediately submit the
dirty pages for I/O.  Hence, we can avoid the overhead of adding the
inode to the list of inodes whose data pages will be to be flushed out
to disk completely during the next commit operation.

[NOTE from Zheng Liu]
This commit fixes a potential bug in ext4 with delalloc.  This bug has
been hitted in Hadoop.  When some dirty pages are written out, we will
try to grab some contig.  In __write_cache_pages_da() we will check
whether page can be merged to current extent or not.  If not, we will
map non-allocated blocks and start IO.  After that the current page will
be unlocked.  But if in mpage_da_map_and_submit() the journal could has
been aborted and we will return directly with setting mpd->io_done = 1.
Then in ext4_da_writepages() we will call mpage_da_map_and_submit() to
start IO again.  So in mpage_da_submit_io() we will hit the
BUG_ON(!PageLocked(page)).  Let's see what happens.

ext4_da_writepages()
  ->write_cache_pages_da()
    ->__write_cache_pages_da()
      ->mpage_da_map_and_submit()
        [Here we meet a aborted journal and return directly.  So
         mpd->io_done = 0.]
      ->unlock_page()
  ->mpage_da_map_and_submit()
    [We will call this function again because mpd->io_done == 0 and
     the current page isn't merged into the contig. extent.]
    ->mpage_da_submit_io()
      ->BUG_ON(!PageLocked(page))

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
Acked-by: 

---
 fs/ext4/inode.c |   18 +-----------------
 1 file changed, 1 insertion(+), 17 deletions(-)

--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -2482,13 +2482,6 @@
 	if (buffer_new(&new))
 		__unmap_underlying_blocks(mpd->inode, &new);
 
-	if (ext4_should_order_data(mpd->inode)) {
-		err = ext4_jbd2_file_inode(handle, mpd->inode);
-		if (err)
-			/* This only happens if the journal is aborted */
-			return;
-	}
-
 	/*
 	 * Update on-disk size along with block allocation.
 	 */
@@ -3575,17 +3568,8 @@
 		if (ext4_has_inline_data(inode) ||
 		    ext4_da_should_update_i_disksize(page, end)) {
 			down_write(&EXT4_I(inode)->i_data_sem);
-			if (new_i_size > EXT4_I(inode)->i_disksize) {
-				/*
-				 * Updating i_disksize when extending file
-				 * without needing block allocation
-				 */
-				if (ext4_should_order_data(inode))
-					ret = ext4_jbd2_file_inode(handle,
-								   inode);
-
+			if (new_i_size > EXT4_I(inode)->i_disksize)
 				EXT4_I(inode)->i_disksize = new_i_size;
-			}
 			up_write(&EXT4_I(inode)->i_data_sem);
 			/* We need to mark inode dirty even if
 			 * new_i_size is less that inode->i_size
